# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

version: "3.7"

networks:
  mainflux-base-net:
    driver: bridge

volumes:
  mainflux-authn-db-volume:
  mainflux-users-db-volume:
  mainflux-things-db-volume:
  mainflux-auth-redis-volume:
  mainflux-es-redis-volume:
  mainflux-influxdb-volume:
  mainflux-bootstrap-db-volume:
  mainflux-grafana-volume:
  mainflux-opcua-adapter-volume:
  mainflux-opcua-redis-volume:
  mainflux-twins-db-volume:
  mainflux-twins-db-configdb-volume:
  mainflux-mqtt-broker-volume:

services:
  ui:
    image: mainflux/ui:latest
    container_name: mainflux-ui
    restart: on-failure
    ports:
      - ${MF_UI_PORT}:${MF_UI_PORT}
    networks:
      - mainflux-base-net
    environment:
      MF_UI_PORT: ${MF_UI_PORT}
      MF_UI_MQTT_WS_URL: ${MF_UI_MQTT_WS_URL}

  nginx:
    image: nginx:1.16.0-alpine
    container_name: mainflux-nginx
    restart: on-failure
    volumes:
      - ./nginx/nginx-${AUTH-key}.conf:/etc/nginx/nginx.conf.template
      - ./nginx/entrypoint.sh:/entrypoint.sh
      - ./nginx/snippets:/etc/nginx/snippets
      - ./ssl/authorization.js:/etc/nginx/authorization.js
      - ./ssl/certs/mainflux-server.crt:/etc/ssl/certs/mainflux-server.crt
      - ./ssl/certs/ca.crt:/etc/ssl/certs/ca.crt
      - ./ssl/certs/mainflux-server.key:/etc/ssl/private/mainflux-server.key
      - ./ssl/dhparam.pem:/etc/ssl/certs/dhparam.pem
    ports:
      - ${MF_NGINX_HTTP_PORT}:${MF_NGINX_HTTP_PORT}
      - ${MF_NGINX_SSL_PORT}:${MF_NGINX_SSL_PORT}
      - ${MF_NGINX_MQTT_PORT}:${MF_NGINX_MQTT_PORT}
      - ${MF_NGINX_MQTTS_PORT}:${MF_NGINX_MQTTS_PORT}
    networks:
      - mainflux-base-net
    env_file:
      - ../.env
    command: /entrypoint.sh
    depends_on:
      - things
      - users
      - mqtt-adapter
      - http-adapter

  nats:
    image: nats:1.3.0
    container_name: mainflux-nats
    command: "-c /etc/nats/nats.conf"
    restart: on-failure
    volumes:
      - ./nats/:/etc/nats
    networks:
      - mainflux-base-net

  ## AUTHN SERVICE
  authn-db:
    image: postgres:10.8-alpine
    container_name: mainflux-authn-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_AUTHN_DB_USER}
      POSTGRES_PASSWORD: ${MF_AUTHN_DB_PASS}
      POSTGRES_DB: ${MF_AUTHN_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-authn-db-volume:/var/lib/postgresql/data

  authn:
    image: mainflux/authn:latest
    container_name: mainflux-authn
    depends_on:
      - authn-db
    expose:
      - ${MF_AUTHN_GRPC_PORT}
    restart: on-failure
    environment:
      MF_AUTHN_LOG_LEVEL: ${MF_AUTHN_LOG_LEVEL}
      MF_AUTHN_DB_HOST: authn-db
      MF_AUTHN_DB_PORT: ${MF_AUTHN_DB_PORT}
      MF_AUTHN_DB_USER: ${MF_AUTHN_DB_USER}
      MF_AUTHN_DB_PASS: ${MF_AUTHN_DB_PASS}
      MF_AUTHN_DB: ${MF_AUTHN_DB}
      MF_AUTHN_HTTP_PORT: ${MF_AUTHN_HTTP_PORT}
      MF_AUTHN_GRPC_PORT: ${MF_AUTHN_GRPC_PORT}
      MF_AUTHN_SECRET: ${MF_AUTHN_SECRET}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_AUTHN_HTTP_PORT}:${MF_AUTHN_HTTP_PORT}
      - ${MF_AUTHN_GRPC_PORT}:${MF_AUTHN_GRPC_PORT}
    networks:
      - mainflux-base-net

  ## USERS SERVICE
  users-db:
    image: postgres:10.8-alpine
    container_name: mainflux-users-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_USERS_DB_USER}
      POSTGRES_PASSWORD: ${MF_USERS_DB_PASS}
      POSTGRES_DB: ${MF_USERS_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-users-db-volume:/var/lib/postgresql/data

  users:
    image: mainflux/users:latest
    container_name: mainflux-users
    volumes:
      - ./users/emailer/templates/${MF_EMAIL_TEMPLATE}:/${MF_EMAIL_TEMPLATE}
    depends_on:
      - users-db
      - authn
    restart: on-failure
    environment:
      MF_USERS_LOG_LEVEL: ${MF_USERS_LOG_LEVEL}
      MF_USERS_DB_HOST: users-db
      MF_USERS_DB_PORT: ${MF_USERS_DB_PORT}
      MF_USERS_DB_USER: ${MF_USERS_DB_USER}
      MF_USERS_DB_PASS: ${MF_USERS_DB_PASS}
      MF_USERS_DB: ${MF_USERS_DB}
      MF_USERS_HTTP_PORT: ${MF_USERS_HTTP_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_EMAIL_DRIVER: ${MF_EMAIL_DRIVER}
      MF_EMAIL_HOST: ${MF_EMAIL_HOST}
      MF_EMAIL_PORT: ${MF_EMAIL_PORT}
      MF_EMAIL_USERNAME: ${MF_EMAIL_USERNAME}
      MF_EMAIL_PASSWORD: ${MF_EMAIL_PASSWORD}
      MF_EMAIL_FROM_ADDRESS: ${MF_EMAIL_FROM_ADDRESS}
      MF_EMAIL_FROM_NAME: ${MF_EMAIL_FROM_NAME}
      MF_EMAIL_TEMPLATE: ${MF_EMAIL_TEMPLATE}
      MF_TOKEN_RESET_ENDPOINT: ${MF_TOKEN_RESET_ENDPOINT}
      MF_AUTHN_GRPC_URL: ${MF_AUTHN_GRPC_URL}
      MF_AUTHN_GRPC_TIMEOUT: ${MF_AUTHN_GRPC_TIMEOUT}
      MF_USERS_ADMIN_EMAIL: ${MF_USERS_ADMIN_EMAIL}
      MF_USERS_ADMIN_PASSWORD: ${MF_USERS_ADMIN_PASSWORD}
    ports:
      - ${MF_USERS_HTTP_PORT}:${MF_USERS_HTTP_PORT}
    networks:
      - mainflux-base-net

  ## THINGS SERVICE
  things-db:
    image: postgres:10.8-alpine
    container_name: mainflux-things-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_THINGS_DB_USER}
      POSTGRES_PASSWORD: ${MF_THINGS_DB_PASS}
      POSTGRES_DB: ${MF_THINGS_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-things-db-volume:/var/lib/postgresql/data

  auth-redis:
    image: redis:5.0-alpine
    container_name: mainflux-auth-redis
    restart: on-failure
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-auth-redis-volume:/data

  things:
    image: mainflux/things:latest
    container_name: mainflux-things
    depends_on:
      - things-db
      - authn
    restart: on-failure
    environment:
      MF_THINGS_LOG_LEVEL: ${MF_THINGS_LOG_LEVEL}
      MF_THINGS_DB_HOST: things-db
      MF_THINGS_DB_PORT: ${MF_THINGS_DB_PORT}
      MF_THINGS_DB_USER: ${MF_THINGS_DB_USER}
      MF_THINGS_DB_PASS: ${MF_THINGS_DB_PASS}
      MF_THINGS_DB: ${MF_THINGS_DB}
      MF_THINGS_CACHE_URL: auth-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_HTTP_PORT: ${MF_THINGS_HTTP_PORT}
      MF_THINGS_AUTH_HTTP_PORT: ${MF_THINGS_AUTH_HTTP_PORT}
      MF_THINGS_AUTH_GRPC_PORT: ${MF_THINGS_AUTH_GRPC_PORT}
      MF_THINGS_SECRET: ${MF_THINGS_SECRET}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_AUTHN_GRPC_URL: ${MF_AUTHN_GRPC_URL}
      MF_AUTHN_GRPC_TIMEOUT: ${MF_AUTHN_GRPC_TIMEOUT}
    ports:
      - ${MF_THINGS_HTTP_PORT}:${MF_THINGS_HTTP_PORT}
      - ${MF_THINGS_AUTH_HTTP_PORT}:${MF_THINGS_AUTH_HTTP_PORT}
      - ${MF_THINGS_AUTH_GRPC_PORT}:${MF_THINGS_AUTH_GRPC_PORT}
    networks:
      - mainflux-base-net

  jaeger:
    image: jaegertracing/all-in-one:1.13
    container_name: mainflux-jaeger
    ports:
      - ${MF_JAEGER_PORT}:${MF_JAEGER_PORT}/udp
      - ${MF_JAEGER_FRONTEND}:${MF_JAEGER_FRONTEND}
      - ${MF_JAEGER_COLLECTOR}:${MF_JAEGER_COLLECTOR}
      - ${MF_JAEGER_CONFIGS}:${MF_JAEGER_CONFIGS}
    networks:
      - mainflux-base-net

  vernemq:
    image: mainflux/vernemq:latest
    container_name: mainflux-vernemq
    restart: on-failure
    environment:
      DOCKER_VERNEMQ_ALLOW_ANONYMOUS: ${MF_DOCKER_VERNEMQ_ALLOW_ANONYMOUS}
      DOCKER_VERNEMQ_LOG__CONSOLE__LEVEL: ${MF_DOCKER_VERNEMQ_LOG__CONSOLE__LEVEL}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-mqtt-broker-volume:/var/lib/vernemq

  ## MQTT ADAPTER
  mqtt-adapter:
    image: mainflux/mqtt:latest
    container_name: mainflux-mqtt
    depends_on:
      - vernemq
      - things
      - nats
    restart: on-failure
    environment:
      MF_MQTT_ADAPTER_LOG_LEVEL: ${MF_MQTT_ADAPTER_LOG_LEVEL}
      MF_MQTT_ADAPTER_MQTT_PORT: ${MF_MQTT_ADAPTER_MQTT_PORT}
      MF_MQTT_ADAPTER_WS_PORT: ${MF_MQTT_ADAPTER_WS_PORT}
      MF_MQTT_ADAPTER_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_MQTT_ADAPTER_MQTT_TARGET_HOST: vernemq
      MF_MQTT_ADAPTER_MQTT_TARGET_PORT: ${MF_MQTT_BROKER_PORT}
      MF_MQTT_ADAPTER_WS_TARGET_HOST: vernemq
      MF_MQTT_ADAPTER_WS_TARGET_PORT: ${MF_MQTT_BROKER_WS_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_THINGS_AUTH_GRPC_URL: ${MF_THINGS_AUTH_GRPC_URL}
      MF_THINGS_AUTH_GRPC_TIMEOUT: ${MF_THINGS_AUTH_GRPC_TIMEOUT}
      MF_AUTH_CACHE_URL: auth-redis:${MF_REDIS_TCP_PORT}
    networks:
      - mainflux-base-net

  ## HTTP ADAPTER
  http-adapter:
    image: mainflux/http:latest
    container_name: mainflux-http
    depends_on:
      - things
      - nats
    restart: on-failure
    environment:
      MF_HTTP_ADAPTER_LOG_LEVEL: debug
      MF_HTTP_ADAPTER_PORT: ${MF_HTTP_ADAPTER_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_THINGS_AUTH_GRPC_URL: ${MF_THINGS_AUTH_GRPC_URL}
      MF_THINGS_AUTH_GRPC_TIMEOUT: ${MF_THINGS_AUTH_GRPC_TIMEOUT}
    ports:
      - ${MF_HTTP_ADAPTER_PORT}:${MF_HTTP_ADAPTER_PORT}
    networks:
      - mainflux-base-net

  es-redis:
    image: redis:5.0-alpine
    container_name: mainflux-es-redis
    restart: on-failure
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-es-redis-volume:/data

  ## OPC-UA ADAPTER
  opcua-redis:
    image: redis:5.0-alpine
    container_name: mainflux-opcua-redis
    restart: on-failure
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-opcua-redis-volume:/data

  opcua-adapter:
    image: mainflux/opcua:latest
    container_name: mainflux-opcua
    depends_on:
      - nats
    restart: on-failure
    environment:
      MF_OPCUA_ADAPTER_HTTP_PORT: ${MF_OPCUA_ADAPTER_HTTP_PORT}
      MF_OPCUA_ADAPTER_LOG_LEVEL: ${MF_OPCUA_ADAPTER_LOG_LEVEL}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_OPCUA_ADAPTER_POLICY: ${MF_OPCUA_ADAPTER_POLICY}
      MF_OPCUA_ADAPTER_MODE: ${MF_OPCUA_ADAPTER_MODE}
      MF_OPCUA_ADAPTER_CERT_FILE: ${MF_OPCUA_ADAPTER_CERT_FILE}
      MF_OPCUA_ADAPTER_KEY_FILE: ${MF_OPCUA_ADAPTER_KEY_FILE}
      MF_OPCUA_ADAPTER_ROUTE_MAP_URL: opcua-redis:${MF_REDIS_TCP_PORT}
      MF_OPCUA_ADAPTER_ROUTE_MAP_PASS: ${MF_OPCUA_ADAPTER_ROUTE_MAP_PASS}
      MF_OPCUA_ADAPTER_ROUTE_MAP_DB: ${MF_OPCUA_ADAPTER_ROUTE_MAP_DB}
      MF_THINGS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_ES_PASS: ${MF_THINGS_ES_PASS}
      MF_THINGS_ES_DB: ${MF_THINGS_ES_DB}
      MF_OPCUA_ADAPTER_EVENT_CONSUMER: ${MF_OPCUA_ADAPTER_EVENT_CONSUMER}
    ports:
      - ${MF_OPCUA_ADAPTER_HTTP_PORT}:${MF_OPCUA_ADAPTER_HTTP_PORT}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-opcua-adapter-volume:/store

  ## INFLUX DB
  influxdb:
    image: influxdb:1.6.4-alpine
    container_name: mainflux-influxdb
    restart: on-failure
    environment:
      INFLUXDB_DB: ${MF_INFLUX_WRITER_DB}
      INFLUXDB_ADMIN_USER: ${MF_INFLUX_WRITER_DB_USER}
      INFLUXDB_ADMIN_PASSWORD: ${MF_INFLUX_WRITER_DB_PASS}
    networks:
      - mainflux-base-net
    ports:
      - ${MF_INFLUX_WRITER_DB_PORT}:${MF_INFLUX_WRITER_DB_PORT}
    volumes:
      - mainflux-influxdb-volume:/var/lib/influxdb

  influxdb-writer:
    image: mainflux/influxdb-writer:latest
    container_name: mainflux-influxdb-writer
    depends_on:
      - influxdb
      - nats
    restart: on-failure
    environment:
      MF_INFLUX_WRITER_LOG_LEVEL: debug
      MF_NATS_URL: ${MF_NATS_URL}
      MF_INFLUX_WRITER_PORT: ${MF_INFLUX_WRITER_PORT}
      MF_INFLUX_WRITER_BATCH_SIZE: ${MF_INFLUX_WRITER_BATCH_SIZE}
      MF_INFLUX_WRITER_BATCH_TIMEOUT: ${MF_INFLUX_WRITER_BATCH_TIMEOUT}
      MF_INFLUX_WRITER_DB: ${MF_INFLUX_WRITER_DB}
      MF_INFLUX_WRITER_DB_HOST: mainflux-influxdb
      MF_INFLUX_WRITER_DB_PORT: ${MF_INFLUX_WRITER_DB_PORT}
      MF_INFLUX_WRITER_DB_USER: ${MF_INFLUX_WRITER_DB_USER}
      MF_INFLUX_WRITER_DB_PASS: ${MF_INFLUX_WRITER_DB_PASS}
    ports:
      - ${MF_INFLUX_WRITER_PORT}:${MF_INFLUX_WRITER_PORT}
    networks:
      - mainflux-base-net
    volumes:
      - ./subjects.toml:/config/subjects.toml

  grafana:
    image: grafana/grafana:5.1.3
    container_name: mainflux-grafana
    depends_on:
      - influxdb
    restart: on-failure
    ports:
      - ${MF_INFLUX_WRITER_GRAFANA_PORT}:${MF_GRAFANA_PORT}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-grafana-volume:/var/lib/grafana

  influxdb-reader:
    image: mainflux/influxdb-reader:latest
    container_name: mainflux-influxdb-reader
    restart: on-failure
    environment:
      MF_INFLUX_READER_LOG_LEVEL: debug
      MF_INFLUX_READER_PORT: ${MF_INFLUX_READER_PORT}
      MF_INFLUX_READER_DB: ${MF_INFLUX_READER_DB}
      MF_INFLUX_READER_DB_HOST: mainflux-influxdb
      MF_INFLUX_READER_DB_PORT: ${MF_INFLUX_READER_DB_PORT}
      MF_INFLUX_READER_DB_USER: ${MF_INFLUX_READER_DB_USER}
      MF_INFLUX_READER_DB_PASS: ${MF_INFLUX_READER_DB_PASS}
      MF_INFLUX_READER_SERVER_CERT: ${MF_INFLUX_READER_SERVER_CERT}
      MF_INFLUX_READER_SERVER_KEY: ${MF_INFLUX_READER_SERVER_KEY}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_THINGS_AUTH_GRPC_URL: ${MF_THINGS_AUTH_GRPC_URL}
      MF_THINGS_AUTH_GRPC_TIMEOUT: ${MF_THINGS_AUTH_GRPC_TIMEOUT}
    ports:
      - ${MF_INFLUX_READER_PORT}:${MF_INFLUX_READER_PORT}
    networks:
      - mainflux-base-net
    volumes:
      - ../../ssl/certs:/etc/ssl/certs

  ## LORA ADAPTER
  lora-redis:
    image: redis:5.0-alpine
    container_name: mainflux-lora-redis
    restart: on-failure
    networks:
      - mainflux-base-net

  lora-adapter:
    image: mainflux/lora:latest
    container_name: mainflux-lora
    depends_on:
      - nats
    restart: on-failure
    environment:
      MF_LORA_ADAPTER_LOG_LEVEL: ${MF_LORA_ADAPTER_LOG_LEVEL}
      MF_THINGS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_LORA_ADAPTER_ROUTE_MAP_URL: lora-redis:${MF_REDIS_TCP_PORT}
      MF_LORA_ADAPTER_MESSAGES_URL: ${MF_LORA_ADAPTER_MESSAGES_URL}
      MF_LORA_ADAPTER_HTTP_PORT: ${MF_LORA_ADAPTER_HTTP_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
    ports:
      - ${MF_LORA_ADAPTER_HTTP_PORT}:${MF_LORA_ADAPTER_HTTP_PORT}
    networks:
      - mainflux-base-net

  ## BOOTSTRAP
  bootstrap-db:
    image: postgres:10.2-alpine
    container_name: mainflux-bootstrap-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_BOOTSTRAP_DB_USER}
      POSTGRES_PASSWORD: ${MF_BOOTSTRAP_DB_PASS}
      POSTGRES_DB: ${MF_BOOTSTRAP_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-bootstrap-db-volume:/var/lib/postgresql/data

  bootstrap:
    image: mainflux/bootstrap:latest
    container_name: mainflux-bootstrap
    depends_on:
      - bootstrap-db
    restart: on-failure
    ports:
      - ${MF_BOOTSTRAP_PORT}:${MF_BOOTSTRAP_PORT}
    environment:
      MF_BOOTSTRAP_LOG_LEVEL: ${MF_BOOTSTRAP_LOG_LEVEL}
      MF_BOOTSTRAP_DB_HOST: bootstrap-db
      MF_BOOTSTRAP_DB_PORT: ${MF_BOOTSTRAP_DB_PORT}
      MF_BOOTSTRAP_DB_USER: ${MF_BOOTSTRAP_DB_USER}
      MF_BOOTSTRAP_DB_PASS: ${MF_BOOTSTRAP_DB_PASS}
      MF_BOOTSTRAP_DB: ${MF_BOOTSTRAP_DB}
      MF_BOOTSTRAP_DB_SSL_MODE: ${MF_BOOTSTRAP_DB_SSL_MODE}
      MF_BOOTSTRAP_PORT: ${MF_BOOTSTRAP_PORT}
      MF_SDK_BASE_URL: http://mainflux-things:${MF_THINGS_HTTP_PORT}
      MF_THINGS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_BOOTSTRAP_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_AUTHN_GRPC_URL: ${MF_AUTHN_GRPC_URL}
      MF_AUTHN_GRPC_TIMMEOUT: ${MF_AUTHN_GRPC_TIMEOUT}
    networks:
      - mainflux-base-net

  # Provision
  provision:
    image: mainflux/provision:latest
    container_name: mainflux-provision
    restart: on-failure
    networks:
      - mainflux-base-net
    ports:
      - ${MF_PROVISION_HTTP_PORT}:${MF_PROVISION_HTTP_PORT}
    environment:
      MF_PROVISION_LOG_LEVEL: ${MF_PROVISION_LOG_LEVEL}
      MF_PROVISION_HTTP_PORT: ${MF_PROVISION_HTTP_PORT}
      MF_PROVISION_CONFIG_FILE: ${MF_PROVISION_CONFIG_FILE}
      MF_PROVISION_LOG_LEVEL: ${MF_PROVISION_LOG_LEVEL}
      MF_PROVISION_ENV_CLIENTS_TLS: ${MF_PROVISION_ENV_CLIENTS_TLS}
      MF_PROVISION_SERVER_CERT: ${MF_PROVISION_SERVER_CERT}
      MF_PROVISION_SERVER_KEY: ${MF_PROVISION_SERVER_KEY}
      MF_PROVISION_MQTT_URL: ${MF_PROVISION_MQTT_URL}
      MF_PROVISION_USERS_LOCATION: ${MF_PROVISION_USERS_LOCATION}
      MF_PROVISION_THINGS_LOCATION: ${MF_PROVISION_THINGS_LOCATION}
      MF_PROVISION_USER: ${MF_PROVISION_USER}
      MF_PROVISION_PASS: ${MF_PROVISION_PASS}
      MF_PROVISION_API_KEY: ${MF_PROVISION_API_KEY}
      MF_PROVISION_CERTS_SVC_URL: ${MF_PROVISION_CERTS_SVC_URL}
      MF_PROVISION_X509_PROVISIONING: ${MF_PROVISION_X509_PROVISIONING}
      MF_PROVISION_BS_SVC_URL: ${MF_PROVISION_BS_SVC_URL}
      MF_PROVISION_BS_SVC_WHITELIST_URL: ${MF_PROVISION_BS_SVC_WHITELIST_URL}
      MF_PROVISION_BS_CONFIG_PROVISIONING: ${MF_PROVISION_BS_CONFIG_PROVISIONING}
      MF_PROVISION_BS_AUTO_WHITELIST: ${MF_PROVISION_BS_AUTO_WHITELIST}
      MF_PROVISION_BS_CONTENT: ${MF_PROVISION_BS_CONTENT}
      MF_PROVISION_CERTS_RSA_BITS: ${MF_PROVISION_CERTS_RSA_BITS}
      MF_PROVISION_CERTS_HOURS_VALID: ${MF_PROVISION_CERTS_HOURS_VALID}
    volumes:
      - ./configs:/configs
      - ../ssl/certs/ca.key:/etc/ssl/certs/ca.key
      - ../ssl/certs/ca.crt:/etc/ssl/certs/ca.crt

  ## TWINS
  twins-db:
    image: mongo:bionic
    command: mongod --port ${MF_TWINS_DB_PORT}
    container_name: mainflux-twins-db
    restart: on-failure
    environment:
      MONGO_INITDB_DATABASE: ${MF_TWINS_DB}
    ports:
      - ${MF_TWINS_DB_PORT}:${MF_TWINS_DB_PORT}
    networks:
      mainflux-base-net:
    volumes:
      - mainflux-twins-db-volume:/data/db
      - mainflux-twins-db-configdb-volume:/data/configdb

  twins:
    image: mainflux/twins:latest
    container_name: mainflux-twins
    depends_on:
      - twins-db
      - nats
    restart: on-failure
    environment:
      MF_TWINS_LOG_LEVEL: ${MF_TWINS_LOG_LEVEL}
      MF_TWINS_HTTP_PORT: ${MF_TWINS_HTTP_PORT}
      MF_TWINS_DB: ${MF_TWINS_DB}
      MF_TWINS_DB_HOST: ${MF_TWINS_DB_HOST}
      MF_TWINS_DB_PORT: ${MF_TWINS_DB_PORT}
      MF_TWINS_CHANNEL_ID: ${MF_TWINS_CHANNEL_ID}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_TWINS_MQTT_URL: ${MF_TWINS_MQTT_URL}
      MF_AUTHN_GRPC_URL: ${MF_AUTHN_GRPC_URL}
      MF_AUTHN_GRPC_TIMEOUT: ${MF_AUTHN_GRPC_TIMEOUT}
    ports:
      - ${MF_TWINS_HTTP_PORT}:${MF_TWINS_HTTP_PORT}
    networks:
      - mainflux-base-net
