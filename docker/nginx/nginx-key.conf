# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

# This is the default Mainflux NGINX configuration.

user nginx;
worker_processes auto;
worker_cpu_affinity auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    # Explanation: https://serverfault.com/questions/787919/optimal-value-for-nginx-worker-connections
    # We'll keep 10k connections per core (assuming one worker per core)
    worker_connections 10000;
}

http {
    include snippets/http_access_log.conf;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Include single-node or multiple-node (cluster) upstream
    include snippets/mqtt-ws-upstream.conf;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        include snippets/ssl.conf;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods '*';
        add_header Access-Control-Allow-Headers '*';

        server_name localhost;

        # Proxy pass to users service
        location ~ ^/(users|tokens|password) {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT};
        }

        location /groups/users/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT}/groups/;
        }

        # Proxy pass to things service
        location ~ ^/(things|channels|connect) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        }

        location /groups/things/ {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT}/groups/;
        }

        location ~ ^/(identify){
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_AUTH_HTTP_PORT};
        }

        location ~ ^/(groups|members|keys) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://auth:${MF_AUTH_HTTP_PORT};
        }

        location /version {
            include snippets/proxy-headers.conf;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        }

        # Proxy pass to mainflux-http-adapter
        location /http/ {
            include snippets/proxy-headers.conf;

            # Trailing `/` is mandatory. Refer to the http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
            # If the proxy_pass directive is specified with a URI, then when a request is passed to the server,
            # the part of a normalized request URI matching the location is replaced by a URI specified in the directive
            proxy_pass http://http-adapter:${MF_HTTP_ADAPTER_PORT}/;
        }

        # Proxy pass to mainflux-mqtt-adapter over WS
        location /mqtt {
            include snippets/proxy-headers.conf;
            include snippets/ws-upgrade.conf;
            proxy_pass http://mqtt_ws_cluster;
        }

        # Proxy pass to mainflux-influxdb-reader
        location /reader/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://influxdb-reader:${MF_INFLUX_READER_PORT}/;
        }

        # Proxy pass to mainflux-bootstrap
        location /bootstrap/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://bootstrap:${MF_BOOTSTRAP_PORT}/;
        }

        # Proxy pass to mainflux-opcua-adapter
        location /browse {
            include snippets/proxy-headers.conf;
            proxy_pass http://opcua-adapter:${MF_OPCUA_ADAPTER_HTTP_PORT};
        }

        # Proxy pass to mainflux-twins
        location ~ ^/(twins|states) {
            include snippets/proxy-headers.conf;
            proxy_pass http://twins:${MF_TWINS_HTTP_PORT};
        }

        location / {
            include snippets/proxy-headers.conf;
            proxy_pass http://ui:${MF_UI_PORT};
        }

        location /grafana/ {
            include snippets/proxy-headers.conf;
            # make auth subrequest to Mainflux
            # verify will check if user with Authorization header
            # and if user is the owner of the thing for which
            # dashboard will be displayed
            # auth_request /user-verify;
            auth_request /verify;
            proxy_pass http://grafana:3000/;
            proxy_set_header X-WEBAUTH-USER $auth_user;
            proxy_set_header Referer $scheme://$host/grafana;
        }


        location /user-verify/ {
            include snippets/proxy-headers.conf;
            proxy_set_header X-Original-URI $request_uri;
            proxy_pass http://users:${MF_USERS_HTTP_PORT}/verify/;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            # Mainflux on success sets X-MF-USER header 
            # that will be sent upstream to the grafana
            # as X-WEBAUTH-USER which will be used for grafana auth
            auth_request_set $auth_user $upstream_http_x_mf_user;
        }

        location /verify {
            include snippets/proxy-headers.conf;
            if ($request_uri ~ (.*)var-thing=[a-zA-Z0-9_.-]*) 
            {
                proxy_set_header X-Original-URI $request_uri;
            }
            proxy_set_header X-MYARGS $args;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            # Mainflux on success sets X-MF-USER header 
            # that will be sent upstream to the grafana
            # as X-WEBAUTH-USER which will be used for grafana auth
            auth_request_set $auth_user $upstream_http_x_mf_user;
        }
    }
}

# MQTT
stream {
   include snippets/stream_access_log.conf;

    # Include single-node or multiple-node (cluster) upstream
    include snippets/mqtt-upstream.conf;

    server {
        listen 1883;
        listen [::]:1883;
        listen 8883 ssl;
        listen [::]:8883 ssl;

        include snippets/ssl.conf;

        proxy_pass mqtt_cluster;
    }
}

