# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

# This is the default Mainflux NGINX configuration.



    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        include snippets/ssl.conf;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods '*';
        add_header Access-Control-Allow-Headers '*';

        server_name localhost;

        # Proxy pass to users service
        location ~ ^/(users|tokens|password) {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT};
        }

        location /groups/users/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT}/groups/;
        }

        # Proxy pass to things service
        location ~ ^/(things|channels|connect) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        }

        location /groups/things/ {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT}/groups/;
        }

        location ~ ^/(identify){
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://things:${MF_THINGS_AUTH_HTTP_PORT};
        }

        location ~ ^/(groups|members|keys) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://auth:${MF_AUTH_HTTP_PORT};
        }

        location /version {
            include snippets/proxy-headers.conf;
            proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        }

        # Proxy pass to mainflux-http-adapter
        location /http/ {
            include snippets/proxy-headers.conf;

            # Trailing `/` is mandatory. Refer to the http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
            # If the proxy_pass directive is specified with a URI, then when a request is passed to the server,
            # the part of a normalized request URI matching the location is replaced by a URI specified in the directive
            proxy_pass http://http-adapter:${MF_HTTP_ADAPTER_PORT}/;
        }

        # Proxy pass to mainflux-mqtt-adapter over WS
        location /mqtt {
            include snippets/proxy-headers.conf;
            include snippets/ws-upgrade.conf;
            proxy_pass http://mqtt_ws_cluster;
        }

        # Proxy pass to mainflux-influxdb-reader
        location /reader/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://influxdb-reader:${MF_INFLUX_READER_PORT}/;
        }

        # Proxy pass to mainflux-bootstrap
        location /bootstrap/ {
            include snippets/proxy-headers.conf;
            proxy_pass http://bootstrap:${MF_BOOTSTRAP_PORT}/;
        }

        # Proxy pass to mainflux-opcua-adapter
        location /browse {
            include snippets/proxy-headers.conf;
            proxy_pass http://opcua-adapter:${MF_OPCUA_ADAPTER_HTTP_PORT};
        }

        # Proxy pass to mainflux-twins
        location ~ ^/(twins|states) {
            include snippets/proxy-headers.conf;
            proxy_pass http://twins:${MF_TWINS_HTTP_PORT};
        }

        location / {
            include snippets/proxy-headers.conf;
            proxy_pass http://ui:${MF_UI_PORT};
        }

        location /grafana/ {
            include snippets/proxy-headers.conf;
            
            access_by_lua_block {
                local httpc = require("resty.http").new()
                local cjson = require "cjson"
                ngx.log(ngx.ERR, "access by lua:", ngx.req.get_headers()["Authorization"])
                
                ngx.log(ngx.ERR, "GRAFANA SESSION:", ngx.req.get_headers()["grafana_session"])
                
                ngx.log(ngx.ERR, "COOKIE", ngx.req.get_headers()["Cookie"])
                
                ngx.log(ngx.ERR, "URI:", ngx.var.uri)
                ngx.log(ngx.ERR, "ARGS:", ngx.var.args)
                if  ngx.req.get_uri_args()["var-thing"] then
                     ngx.log(ngx.ERR, "THING:", ngx.req.get_uri_args()["var-thing"])
                end
                if ngx.var.arg_orgId then 
                    ngx.log(ngx.ERR, "ORGID:", ngx.var.arg_orgId)
                end



                assert(httpc:connect("172.20.0.25", "8180"),
                    "connect should return positively")

                local res = httpc:request({ 
                    path = "/users/profile",
                    method = "GET",
                    headers = {
                        ["Authorization"] =  ngx.req.get_headers()["Authorization"],
                        ["Content-Type"] = ngx.req.get_headers()["Content-Type"],
                        },
                    })
               
                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    return
                end

                local body = res:read_body()
                user = cjson.decode(body)
                ngx.req.set_header("X-WEBAUTH-USER", user.email)
            }
            
   
            proxy_pass http://grafana:3000/;
            proxy_set_header Referer $scheme://$host/grafana;
        }


        # location /user-verify/ {
        #     include snippets/proxy-headers.conf;
        #     proxy_set_header X-Original-URI $request_uri;
        #     proxy_pass http://users:${MF_USERS_HTTP_PORT}/verify/;
        #     proxy_pass_request_body off;
        #     proxy_set_header Content-Length "";
        #     # Mainflux on success sets X-MF-USER header 
        #     # that will be sent upstream to the grafana
        #     # as X-WEBAUTH-USER which will be used for grafana auth
        #     auth_request_set $auth_user $upstream_http_x_mf_user;
        # }

        # location /verify {
        #     include snippets/proxy-headers.conf;
        #     if ($request_uri ~ (.*)var-thing=[a-zA-Z0-9_.-]*) 
        #     {
        #         proxy_set_header X-Original-URI $request_uri;
        #     }
        #     proxy_set_header X-MYARGS $args;
        #     proxy_pass http://things:${MF_THINGS_HTTP_PORT};
        #     proxy_pass_request_body off;
        #     proxy_set_header Content-Length "";
        #     # Mainflux on success sets X-MF-USER header 
        #     # that will be sent upstream to the grafana
        #     # as X-WEBAUTH-USER which will be used for grafana auth
        #     auth_request_set $auth_user $upstream_http_x_mf_user;
        # }
    }


